---
- config:
    - hostname: "localhost:8443"
- common:
  - headers: {"app-id": "4894f63625ed4dfc809b11ac42c2ae8b", "Services-Source-Type": "SDSS-Web", "Accept": "application/json", "Content-Type": "application/json"}
- tests:
# testing of stuff
  - test:
    - name: "Search by keyword"
    - url: "/services/search/duvet.do"
    - method: "GET" # for GETs this tag is not required, if field is not provided then GET is the default behavior
    - validations: # if additional json validation is needed,  basic validation is a 200 response code
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
      - compare: {"messages": "detail", "expected":"WHATEVER", "comparator": "contains"} # this will fail
  - test:
    - name: "Search ensembles by keyword"
    - url: "/services/search/sheets/ensembles.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
      - compare: {"values": "brand_name", "expected":"Starter", "comparator": "contains"}
      - compare: {"values": "refinement_Type_id", "expected":"3", "comparator": "contains"} #sometimes this fails, not due to the test, the response is not consistent
      - compare: {"values": "display_price", "expected":"$70.00", "comparator": "contains"}
      - compare: {"values": "page_Size", "expected":24, "comparator": "content-typetains"}
  - test: # this will fail since it does not exist
    - name: "Basic get" 
    - url: "/api/person/"
    - method: "GET"
  - test:
    - name: "Add item to cart and check basket count"
    - prep_state:
      - name: "Add item to cart"
      - url: "/services/checkout/addItem.do"
      - method: "POST"
      - payload: '{"quantity": "1", "productVariantId": "1322"}'
      - validations:
        - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
    - url: "/services/checkout/itemCount.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
      - compare: {"values": "cart_item_count", "expected":1, "comparator": "contains"}
# category services
  - test:
    - name: "Get the Category Hierarchy based on the depth"
    - url: "/services/category/categoryHierarchy/2.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the Category Hierarchy based on the depth"
    - url: "/services/category/categories.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the Categories"
    - url: "/services/category/categories.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
      - compare: {"values": "path", "expected":"New Arrivals", "comparator": "contains"}
  - test:
    - name: "Get the Category Hierarchy for the category id"
    - url: "/services/category/2184.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
      - compare: {"sub_categories": "name", "expected":"Jewelry", "comparator": "contains"}
  - test:
    - name: "Get the ensembles related to the category for the category id"
    - url: "/services/category/2184/ensembles.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the products and ensembles related to the category for the category id"
    - url: "/services/category/2184/entities.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the products related to the category for the category id"
    - url: "/services/category/2184/products.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
# ensemble services
  - test:
    - name: "Get the cross sell products and ensembles associates with the ensemble from the ensemble identifier"
    - url: "/services/ensemble/59/cross_sell_entities.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the ensemble from the ensemble identifier"
    - url: "/services/ensemble/59.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the categories that the ensemble is in from the ensemeble identifier"
    - url: "/services/ensemble/59/categories.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the up sell products and emsembles associated with the ensemble from the ensemble identifier"
    - url: "/services/ensemble/59/up_sell_entities.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"SUCCESS", "comparator": "contains"}
  - test:
    - name: "Get the inventory for the SKU"
    - url: "/services/locateSkuInventory/1327333333/1/DELIVERY.do"
    - method: "GET"
    - validations:
      - compare: {"messages": "status", "expected":"FAILED", "comparator": "contains"} # odd test, I can't find a proper sku and delivery combination
#- test: 
#    - name: "Get single person"
#    - url: "/api/person/1/"
#- test: 
#    - name: "Delete a single person, verify that works"
#    - url: "/api/person/1/"
#    - method: 'DELETE'
#- test: # create entity by PUT
#    - name: "Create/update person"
#    - url: "/api/person/1/"
#    - method: "PUT"
#    - body: '{"first_name": "Gaius","id": 1,"last_name": "Baltar","login": "gbaltar"}'
#    - headers: {'Content-Type': 'application/json'}
#    - validators:  # This is how we do more complex testing!
#        - compare: {header: content-type, comparator: contains, expected:'json'}
#        - compare: {jsonpath_mini: 'login', expected: 'gbaltar'}  # JSON extraction
#        - compare: {raw_body:"", comparator:contains, expected: 'Baltar' }  # Tests on raw response
#- test: # create entity by POST
#    - name: "Create person"
#    - url: "/api/person/"
#    - method: "POST"
#    - body: '{"first_name": "William","last_name": "Adama","login": "theadmiral"}'
#    - headers: {Content-Type: application/json}



